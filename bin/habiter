#!/usr/bin/env ruby
# Habiter: simple habit tracking
# add or update habit:
#   'habiter did clean_room'
# view habit graph:
#   'habiter graph'

require 'yaml'
require 'optparse'

# Stolen from ActiveSupport
class Time
  def to_date
    ::Date.new(year, month, day)
  end unless method_defined?(:to_date)
end

class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end
end

  

@habiter_file = File.expand_path('~/.habiter.yaml')

begin
  @habits = YAML::load_file(@habiter_file)
rescue
  File.open(@habiter_file, 'w').close()
end

@habits = {} unless @habits

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: habiter.rb [options]"
end
def did(key)
  if not @habits.has_key?(key)
    print "#{key} is not a habit yet. create and complete it? (y/n) "
    if STDIN.gets.chomp == 'y'
      @habits[key] = [Time.now]
    end
  else
    @habits[key] << Time.now
  end
  File.open(@habiter_file, 'w') do |f|
    YAML.dump(@habits, f)
  end
end


def log(options={})
  options[:days] = 30 unless options[:days]
  name_column_width = @habits.max {|a,b| a[0].length <=> b[0].length}[0].length
  day = Date.today - options[:days]
  print " " * (name_column_width + 2)
  (0..options[:days]).each do |i|
      print (day + (i)).strftime('%a')[0].chr.swapcase.colorize(36)
  end
  puts
  @habits.each do |habit, times|
    day = Date.today - (options[:days])
    print (sprintf("%#{name_column_width}s ", habit) + "|").colorize(36)
    times.collect! do |time|
      if time.is_a? Time
        time.to_date
      elsif time.is_a? Date
        time
      end
    end
    done_in_last_30 = 0
    (0..options[:days]).each do |i|
      if times.include? day
        print "+"
        done_in_last_30 += 1
      else
        print " "
      end
      day += 1
    end
    print "(#{done_in_last_30}/30)".colorize(36)
    puts
  end
end

if ARGV[0] == 'did'
  did(ARGV[1])
elsif ARGV[0] == 'log'
  log()
end
